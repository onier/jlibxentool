package org.linux.libc;

import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import com.sun.jna.ptr.IntByReference;
import java.nio.IntBuffer;
import java.util.Arrays;
import java.util.List;

/**
 * JNA Wrapper for library <b>c</b><br>
 * This file was autogenerated by
 * <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit
 * <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> ,
 * <a href="http://rococoa.dev.java.net/">Rococoa</a>, or
 * <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface CLibrary extends Library {

    public static final String JNA_LIBRARY_NAME = (com.sun.jna.Platform.isWindows() ? "msvcrt" : "c");
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(CLibrary.JNA_LIBRARY_NAME);
    public static final CLibrary INSTANCE = (CLibrary) Native.loadLibrary(CLibrary.JNA_LIBRARY_NAME, CLibrary.class);

    public static interface __socket_type {

        public static final int SOCK_STREAM = 1;
        public static final int SOCK_DGRAM = 2;
        public static final int SOCK_RAW = 3;
        public static final int SOCK_RDM = 4;
        public static final int SOCK_SEQPACKET = 5;
        public static final int SOCK_PACKET = 10;
    };
    public static final int MSG_OOB = 0x01;
    public static final int MSG_PEEK = 0x02;
    public static final int MSG_DONTROUTE = 0x04;
    public static final int MSG_CTRUNC = 0x08;
    public static final int MSG_PROXY = 0x10;
    public static final int MSG_TRUNC = 0x20;
    public static final int MSG_DONTWAIT = 0x40;
    public static final int MSG_EOR = 0x80;
    public static final int MSG_WAITALL = 0x100;
    public static final int MSG_FIN = 0x200;
    public static final int MSG_SYN = 0x400;
    public static final int MSG_CONFIRM = 0x800;
    public static final int MSG_RST = 0x1000;
    public static final int MSG_ERRQUEUE = 0x2000;
    public static final int MSG_NOSIGNAL = 0x4000;
    public static final int MSG_MORE = 0x8000;
    public static final int SCM_RIGHTS = 0x01;
    public static final int SCM_CREDENTIALS = 0x02;
    public static final int SHUT_RD = 0;
    public static final int SHUT_WR = 1;
    public static final int SHUT_RDWR = 2;
    public static final int SO_PEERCRED = (int) 17;
    public static final int AF_FILE = (int) 1;
    public static final int SO_RCVBUF = (int) 8;
    public static final int NAME_MAX = (int) 255;
    public static final int _POSIX2_CHARCLASS_NAME_MAX = (int) 14;
    public static final int __SIZEOF_PTHREAD_MUTEX_T = (int) 24;
    public static final int __GLIBC_HAVE_LONG_LONG = (int) 1;
    public static final int RTSIG_MAX = (int) 32;
    public static final int __SIZEOF_PTHREAD_RWLOCKATTR_T = (int) 8;
    public static final int __BYTE_ORDER = (int) 1234;
    public static final int SCHAR_MAX = (int) 127;
    public static final int SO_RCVBUFFORCE = (int) 33;
    public static final int AF_BLUETOOTH = (int) 31;
    public static final int __SIZEOF_PTHREAD_BARRIERATTR_T = (int) 4;
    public static final int _POSIX2_COLL_WEIGHTS_MAX = (int) 2;
    public static final int ARG_MAX = (int) 131072;
    public static final int AF_X25 = (int) 9;
    public static final int SOL_DECNET = (int) 261;
    public static final int __time_t_defined = (int) 1;
    public static final int AIO_PRIO_DELTA_MAX = (int) 20;
    public static final int SO_SECURITY_AUTHENTICATION = (int) 22;
    public static final int SO_RCVTIMEO = (int) 20;
    public static final int CHAR_MAX = (int) 127;
    public static final int __STDC_IEC_559__ = (int) 1;
    public static final int __GLIBC__ = (int) 2;
    public static final int __USE_FORTIFY_LEVEL = (int) 0;
    public static final int AF_SNA = (int) 22;
    public static final int PTHREAD_STACK_MIN = (int) 16384;
    public static final int EXPR_NEST_MAX = (int) 32;
    public static final int SO_NO_CHECK = (int) 11;
    public static final int AF_DECnet = (int) 12;
    public static final int PF_BLUETOOTH = (int) 31;
    public static final int PF_PPPOX = (int) 24;
    public static final int _POSIX_SYMLOOP_MAX = (int) 8;
    public static final int _POSIX2_EXPR_NEST_MAX = (int) 32;
    public static final int __USE_POSIX199309 = (int) 1;
    public static final int SO_BROADCAST = (int) 6;
    public static final int _POSIX_MAX_INPUT = (int) 255;
    public static final int SO_PASSCRED = (int) 16;
    public static final int AF_ROSE = (int) 11;
    public static final int SO_SNDBUF = (int) 7;
    public static final int SIOCATMARK = (int) 0x8905;
    public static final int NGROUPS_MAX = (int) 65536;
    public static final int _BITS_PTHREADTYPES_H = (int) 1;
    public static final int MAX_INPUT = (int) 255;
    public static final int __USE_BSD = (int) 1;
    public static final int __GNU_LIBRARY__ = (int) 6;
    public static final int AF_IPX = (int) 4;
    public static final long UINT_MAX = (long) 4294967295L;
    public static final int LINE_MAX = (int) 2048;
    public static final int _SYS_TYPES_H = (int) 1;
    public static final int PDP_ENDIAN = (int) 3412;
    public static final int __SIZEOF_PTHREAD_COND_COMPAT_T = (int) 12;
    public static final int SIOCGSTAMP = (int) 0x8906;
    public static final int _SVID_SOURCE = (int) 1;
    public static final int PF_MAX = (int) 32;
    public static final int PF_AX25 = (int) 3;
    public static final int SCHAR_MIN = (int) (-128);
    public static final int SO_BSDCOMPAT = (int) 14;
    public static final int _SYS_SELECT_H = (int) 1;
    public static final int _POSIX_RTSIG_MAX = (int) 8;
    public static final int AF_UNIX = (int) 1;
    public static final int PF_NETLINK = (int) 16;
    public static final int AF_SECURITY = (int) 14;
    public static final int __BIT_TYPES_DEFINED__ = (int) 1;
    public static final int AF_MAX = (int) 32;
    public static final int LONG_MIN = (int) (-2147483647 - 1);
    public static final int _BITS_POSIX1_LIM_H = (int) 1;
    public static final int SO_TYPE = (int) 3;
    public static final int _POSIX_LINK_MAX = (int) 8;
    public static final int DELAYTIMER_MAX = (int) 2147483647;
    public static final int PF_INET6 = (int) 10;
    public static final long ULONG_MAX = (long) 4294967295L;
    public static final int PF_ASH = (int) 18;
    public static final int SOMAXCONN = (int) 128;
    public static final int _POSIX_SIGQUEUE_MAX = (int) 32;
    public static final int _BSD_SOURCE = (int) 1;
    public static final int SO_RCVLOWAT = (int) 18;
    public static final int USHRT_MAX = (int) 65535;
    public static final int __USE_POSIX = (int) 1;
    public static final int SOL_AAL = (int) 265;
    public static final int __timer_t_defined = (int) 1;
    public static final int __USE_SVID = (int) 1;
    public static final int SO_REUSEADDR = (int) 2;
    public static final int TTY_NAME_MAX = (int) 32;
    public static final int __LITTLE_ENDIAN = (int) 1234;
    public static final int AF_ASH = (int) 18;
    public static final int AF_UNSPEC = (int) 0;
    public static final int LITTLE_ENDIAN = (int) 1234;
    public static final int SO_SNDBUFFORCE = (int) 32;
    public static final int _POSIX_TTY_NAME_MAX = (int) 9;
    public static final int BIG_ENDIAN = (int) 4321;
    public static final int SO_ATTACH_FILTER = (int) 26;
    public static final int SO_KEEPALIVE = (int) 9;
    public static final int CHAR_MIN = (int) (-128);
    public static final int UIO_MAXIOV = (int) 1024;
    public static final int _POSIX_MQ_OPEN_MAX = (int) 8;
    public static final int SO_SNDTIMEO = (int) 21;
    public static final int SO_SECURITY_ENCRYPTION_NETWORK = (int) 24;
    public static final int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = (int) 4;
    public static final int PF_NETROM = (int) 6;
    public static final int _POSIX_SEM_NSEMS_MAX = (int) 256;
    public static final int _POSIX_TZNAME_MAX = (int) 6;
    public static final int PF_APPLETALK = (int) 5;
    public static final int PF_NETBEUI = (int) 13;
    public static final int FD_SETSIZE = (int) 1024;
    public static final int __STDC_ISO_10646__ = (int) 200009;
    public static final int __SIZEOF_PTHREAD_CONDATTR_T = (int) 4;
    public static final int AF_ATMPVC = (int) 8;
    public static final int __clockid_t_defined = (int) 1;
    public static final int PF_WANPIPE = (int) 25;
    public static final int SOL_RAW = (int) 255;
    public static final int SO_ERROR = (int) 4;
    public static final int _BITS_TYPESIZES_H = (int) 1;
    public static final int _POSIX_STREAM_MAX = (int) 8;
    public static final int _POSIX_NAME_MAX = (int) 14;
    public static final int LONG_MAX = (int) 2147483647;
    public static final int _POSIX_THREAD_KEYS_MAX = (int) 128;
    public static final int __PDP_ENDIAN = (int) 3412;
    public static final int PF_IPX = (int) 4;
    public static final int AF_WANPIPE = (int) 25;
    public static final int AF_LOCAL = (int) 1;
    public static final int SO_DONTROUTE = (int) 5;
    public static final int _BITS_TYPES_H = (int) 1;
    public static final int PATH_MAX = (int) 4096;
    public static final int _POSIX2_LINE_MAX = (int) 2048;
    public static final int PF_ATMPVC = (int) 8;
    public static final int PF_ECONET = (int) 19;
    public static final int __FD_SETSIZE = (int) 1024;
    public static final int PF_PACKET = (int) 17;
    public static final int _POSIX_AIO_LISTIO_MAX = (int) 2;
    public static final int AF_NETLINK = (int) 16;
    public static final int _POSIX_C_SOURCE = (int) 200112;
    public static final int PF_INET = (int) 2;
    public static final int AF_INET6 = (int) 10;
    public static final int PF_ATMSVC = (int) 20;
    public static final int XATTR_SIZE_MAX = (int) 65536;
    public static final int _POSIX2_RE_DUP_MAX = (int) 255;
    public static final int __USE_XOPEN2K = (int) 1;
    public static final int _POSIX_CLOCKRES_MIN = (int) 20000000;
    public static final int AF_ROUTE = (int) 16;
    public static final int _POSIX2_BC_SCALE_MAX = (int) 99;
    public static final int SOL_SOCKET = (int) 1;
    public static final int __GLIBC_MINOR__ = (int) 5;
    public static final int _POSIX_CHILD_MAX = (int) 25;
    public static final int _ENDIAN_H = (int) 1;
    public static final int PF_UNSPEC = (int) 0;
    public static final int __SIZEOF_PTHREAD_COND_T = (int) 48;
    public static final int SIOCSPGRP = (int) 0x8902;
    public static final int __SIZEOF_PTHREAD_ATTR_T = (int) 36;
    public static final int _SYS_UIO_H = (int) 1;
    public static final int COLL_WEIGHTS_MAX = (int) 255;
    public static final int XATTR_NAME_MAX = (int) 255;
    public static final int _POSIX_MAX_CANON = (int) 255;
    public static final int SCM_TIMESTAMP = (int) 29;
    public static final int BC_DIM_MAX = (int) 2048;
    public static final int SHRT_MIN = (int) (-32768);
    public static final int BC_SCALE_MAX = (int) 99;
    public static final int AF_PACKET = (int) 17;
    public static final int PIPE_BUF = (int) 4096;
    public static final int _FEATURES_H = (int) 1;
    public static final int __WORDSIZE = (int) 32;
    public static final int _POSIX_PATH_MAX = (int) 256;
    public static final int SO_PEERSEC = (int) 31;
    public static final int __USE_POSIX2 = (int) 1;
    public static final int _POSIX_SYMLINK_MAX = (int) 255;
    public static final int PF_KEY = (int) 15;
    public static final int CHAR_BIT = (int) 8;
    public static final int SOL_IRDA = (int) 266;
    public static final int MQ_PRIO_MAX = (int) 32768;
    public static final int SOL_X25 = (int) 262;
    public static final int _STRUCT_TIMEVAL = (int) 1;
    public static final int MB_LEN_MAX = (int) 16;
    public static final int SO_PEERNAME = (int) 28;
    public static final int SOL_ATM = (int) 264;
    public static final int _POSIX_DELAYTIMER_MAX = (int) 32;
    public static final int PF_FILE = (int) 1;
    public static final int AF_AX25 = (int) 3;
    public static final int AF_NETROM = (int) 6;
    public static final int _BITS_SOCKADDR_H = (int) 1;
    public static final int __BIG_ENDIAN = (int) 4321;
    public static final int PF_UNIX = (int) 1;
    public static final int SO_SECURITY_ENCRYPTION_TRANSPORT = (int) 23;
    public static final int PF_DECnet = (int) 12;
    public static final int SO_OOBINLINE = (int) 10;
    public static final int _POSIX2_BC_STRING_MAX = (int) 1000;
    public static final int __SIZEOF_PTHREAD_RWLOCK_T = (int) 32;
    public static final int AF_NETBEUI = (int) 13;
    public static final int _POSIX_HOST_NAME_MAX = (int) 255;
    public static final int INT_MIN = (int) (-2147483647 - 1);
    public static final int __USE_POSIX199506 = (int) 1;
    public static final int SO_DETACH_FILTER = (int) 27;
    public static final int _POSIX_QLIMIT = (int) 1;
    public static final int AF_ECONET = (int) 19;
    public static final int __SIZEOF_PTHREAD_MUTEXATTR_T = (int) 4;
    public static final int _POSIX_TIMER_MAX = (int) 32;
    public static final int PF_LOCAL = (int) 1;
    public static final int _POSIX_SEM_VALUE_MAX = (int) 32767;
    public static final int __USE_MISC = (int) 1;
    public static final int HOST_NAME_MAX = (int) 64;
    public static final int __SIZEOF_PTHREAD_BARRIER_T = (int) 20;
    public static final int _POSIX_UIO_MAXIOV = (int) 16;
    public static final int BYTE_ORDER = (int) 1234;
    public static final int __USE_ANSI = (int) 1;
    public static final int _POSIX_NGROUPS_MAX = (int) 8;
    public static final int _POSIX_HIWAT = (int) 512;
    public static final int PTHREAD_DESTRUCTOR_ITERATIONS = (int) 4;
    public static final int _LIBC_LIMITS_H_ = (int) 1;
    public static final int PF_BRIDGE = (int) 7;
    public static final int SOL_PACKET = (int) 263;
    public static final int _POSIX_PIPE_BUF = (int) 512;
    public static final int CHARCLASS_NAME_MAX = (int) 2048;
    public static final int SIOCGPGRP = (int) 0x8904;
    public static final int AF_IRDA = (int) 23;
    public static final int SO_PRIORITY = (int) 12;
    public static final int _POSIX_OPEN_MAX = (int) 20;
    public static final int CHILD_MAX = (int) 999;
    public static final int AF_INET = (int) 2;
    public static final int RE_DUP_MAX = (int) (0x7fff);
    public static final int _SYS_SOCKET_H = (int) 1;
    public static final int SO_BINDTODEVICE = (int) 25;
    public static final int AF_BRIDGE = (int) 7;
    public static final int XATTR_LIST_MAX = (int) 65536;
    public static final int PF_ROUTE = (int) 16;
    public static final int _SIGSET_H_types = (int) 1;
    public static final int SHRT_MAX = (int) 32767;
    public static final int AF_KEY = (int) 15;
    public static final int SO_SNDLOWAT = (int) 19;
    public static final int _BITS_POSIX2_LIM_H = (int) 1;
    public static final int LOGIN_NAME_MAX = (int) 256;
    public static final int _POSIX_LOGIN_NAME_MAX = (int) 9;
    public static final int SO_LINGER = (int) 13;
    public static final int _POSIX2_BC_BASE_MAX = (int) 99;
    public static final int SO_TIMESTAMP = (int) 29;
    public static final int FIOSETOWN = (int) 0x8901;
    public static final int AF_PPPOX = (int) 24;
    public static final int _POSIX_SOURCE = (int) 1;
    public static final int PF_SNA = (int) 22;
    public static final int _POSIX_RE_DUP_MAX = (int) 255;
    public static final int PF_ROSE = (int) 11;
    public static final int PTHREAD_KEYS_MAX = (int) 1024;
    public static final int _LIMITS_H = (int) 1;
    public static final int _POSIX_ARG_MAX = (int) 4096;
    public static final int SSIZE_MAX = (int) 2147483647;
    public static final int __FLOAT_WORD_ORDER = (int) 1234;
    public static final int _SYS_CDEFS_H = (int) 1;
    public static final int _SYS_SYSMACROS_H = (int) 1;
    public static final int __STDC_IEC_559_COMPLEX__ = (int) 1;
    public static final int BC_STRING_MAX = (int) 1000;
    public static final int AF_APPLETALK = (int) 5;
    public static final int UCHAR_MAX = (int) 255;
    public static final int INT_MAX = (int) 2147483647;
    public static final int SO_ACCEPTCONN = (int) 30;
    public static final int PF_IRDA = (int) 23;
    public static final int PF_SECURITY = (int) 14;
    public static final int FIOGETOWN = (int) 0x8903;
    public static final int MAX_CANON = (int) 255;
    public static final int AF_ATMSVC = (int) 20;
    public static final int _BITS_UIO_H = (int) 1;
    public static final int _POSIX_MQ_PRIO_MAX = (int) 32;
    public static final int _SS_SIZE = (int) 128;
    public static final int BC_BASE_MAX = (int) 99;
    public static final int _POSIX_THREAD_THREADS_MAX = (int) 64;
    public static final int _POSIX_AIO_MAX = (int) 1;
    public static final int PF_X25 = (int) 9;
    public static final int SO_PASSSEC = (int) 34;
    public static final int _POSIX_SSIZE_MAX = (int) 32767;
    public static final int _POSIX2_BC_DIM_MAX = (int) 2048;
    public static final int _POSIX_FD_SETSIZE = (int) 20;
    public static final int SO_DEBUG = (int) 1;

    public static class __fsid_t extends Structure {

        /**
         * Type of file system IDs.
         */
        public int[] __val = new int[2];

        public __fsid_t() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList("__val");
        }

        public __fsid_t(int __val[]) {
            super();
            if ((__val.length != this.__val.length)) {
                throw new IllegalArgumentException("Wrong array size !");
            }
            this.__val = __val;
        }

        public __fsid_t(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends __fsid_t implements Structure.ByReference {

        };

        public static class ByValue extends __fsid_t implements Structure.ByValue {

        };
    };

    public static abstract class __sigset_t extends Structure {

        /**
         * Conversion Error : sizeof(unsigned long)
         */
        public __sigset_t() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList();
        }

        public __sigset_t(Pointer peer) {
            super(peer);
        }

        public static abstract class ByReference extends __sigset_t implements Structure.ByReference {

        };

        public static abstract class ByValue extends __sigset_t implements Structure.ByValue {

        };
    };

    public static class timeval extends Structure {

        /**
         * Seconds.
         */
        public NativeLong tv_sec;
        /**
         * Microseconds.
         */
        public NativeLong tv_usec;

        public timeval() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList("tv_sec", "tv_usec");
        }

        public timeval(NativeLong tv_sec, NativeLong tv_usec) {
            super();
            this.tv_sec = tv_sec;
            this.tv_usec = tv_usec;
        }

        public timeval(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends timeval implements Structure.ByReference {

        };

        public static class ByValue extends timeval implements Structure.ByValue {

        };
    };

    public static abstract class fd_set extends Structure {

        /**
         * Conversion Error : sizeof(__fd_mask)
         */
        public fd_set() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList();
        }

        public fd_set(Pointer peer) {
            super(peer);
        }

        public static abstract class ByReference extends fd_set implements Structure.ByReference {

        };

        public static abstract class ByValue extends fd_set implements Structure.ByValue {

        };
    };

    public static class pthread_attr_t extends Union {

        public byte[] __size = new byte[36];
        public NativeLong __align;

        public pthread_attr_t() {
            super();
        }

        public pthread_attr_t(NativeLong __align) {
            super();
            this.__align = __align;
            setType(NativeLong.class);
        }

        public pthread_attr_t(byte __size[]) {
            super();
            if ((__size.length != this.__size.length)) {
                throw new IllegalArgumentException("Wrong array size !");
            }
            this.__size = __size;
            setType(byte[].class);
        }

        public pthread_attr_t(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends pthread_attr_t implements Structure.ByReference {

        };

        public static class ByValue extends pthread_attr_t implements Structure.ByValue {

        };
    };

    public static class __pthread_internal_slist extends Structure {

        public CLibrary.__pthread_internal_slist.ByReference __next;

        public __pthread_internal_slist() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList("__next");
        }

        public __pthread_internal_slist(CLibrary.__pthread_internal_slist.ByReference __next) {
            super();
            this.__next = __next;
        }

        public __pthread_internal_slist(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends __pthread_internal_slist implements Structure.ByReference {

        };

        public static class ByValue extends __pthread_internal_slist implements Structure.ByValue {

        };
    };

    public static class pthread_mutex_t extends Union {

        public __pthread_mutex_s __data;
        public byte[] __size = new byte[24];
        public NativeLong __align;

        public static class __pthread_mutex_s extends Structure {

            public int __lock;
            public int __count;
            public int __owner;
            /**
             * KIND must stay at this position in the structure to maintain<br>
             * binary compatibility.
             */
            public int __kind;
            public int __nusers;
            public field1_union field1;

            public static class field1_union extends Union {

                public int __spins;
                public CLibrary.__pthread_internal_slist __list;

                public field1_union() {
                    super();
                }

                public field1_union(CLibrary.__pthread_internal_slist __list) {
                    super();
                    this.__list = __list;
                    setType(CLibrary.__pthread_internal_slist.class);
                }

                public field1_union(int __spins) {
                    super();
                    this.__spins = __spins;
                    setType(Integer.TYPE);
                }

                public field1_union(Pointer peer) {
                    super(peer);
                }

                public static class ByReference extends field1_union implements Structure.ByReference {

                };

                public static class ByValue extends field1_union implements Structure.ByValue {

                };
            };

            public __pthread_mutex_s() {
                super();
            }

            protected List<?> getFieldOrder() {
                return Arrays.asList("__lock", "__count", "__owner", "__kind", "__nusers", "field1");
            }

            public __pthread_mutex_s(int __lock, int __count, int __owner, int __kind, int __nusers, field1_union field1) {
                super();
                this.__lock = __lock;
                this.__count = __count;
                this.__owner = __owner;
                this.__kind = __kind;
                this.__nusers = __nusers;
                this.field1 = field1;
            }

            public __pthread_mutex_s(Pointer peer) {
                super(peer);
            }

            public static class ByReference extends __pthread_mutex_s implements Structure.ByReference {

            };

            public static class ByValue extends __pthread_mutex_s implements Structure.ByValue {

            };
        };

        public pthread_mutex_t() {
            super();
        }

        public pthread_mutex_t(NativeLong __align) {
            super();
            this.__align = __align;
            setType(NativeLong.class);
        }

        public pthread_mutex_t(__pthread_mutex_s __data) {
            super();
            this.__data = __data;
            setType(__pthread_mutex_s.class);
        }

        public pthread_mutex_t(byte __size[]) {
            super();
            if ((__size.length != this.__size.length)) {
                throw new IllegalArgumentException("Wrong array size !");
            }
            this.__size = __size;
            setType(byte[].class);
        }

        public pthread_mutex_t(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends pthread_mutex_t implements Structure.ByReference {

        };

        public static class ByValue extends pthread_mutex_t implements Structure.ByValue {

        };
    };

    public static class pthread_mutexattr_t extends Union {

        public byte[] __size = new byte[4];
        public NativeLong __align;

        public pthread_mutexattr_t() {
            super();
        }

        public pthread_mutexattr_t(NativeLong __align) {
            super();
            this.__align = __align;
            setType(NativeLong.class);
        }

        public pthread_mutexattr_t(byte __size[]) {
            super();
            if ((__size.length != this.__size.length)) {
                throw new IllegalArgumentException("Wrong array size !");
            }
            this.__size = __size;
            setType(byte[].class);
        }

        public pthread_mutexattr_t(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends pthread_mutexattr_t implements Structure.ByReference {

        };

        public static class ByValue extends pthread_mutexattr_t implements Structure.ByValue {

        };
    };

    public static class pthread_cond_t extends Union {

        public __data_struct __data;
        public byte[] __size = new byte[48];
        public NativeLong __align;

        public static class __data_struct extends Structure {

            public int __lock;
            public int __futex;
            public NativeLong __total_seq;
            public NativeLong __wakeup_seq;
            public NativeLong __woken_seq;
            public Pointer __mutex;
            public int __nwaiters;
            public int __broadcast_seq;

            public __data_struct() {
                super();
            }

            protected List<?> getFieldOrder() {
                return Arrays.asList("__lock", "__futex", "__total_seq", "__wakeup_seq", "__woken_seq", "__mutex", "__nwaiters", "__broadcast_seq");
            }

            public __data_struct(int __lock, int __futex, NativeLong __total_seq, NativeLong __wakeup_seq, NativeLong __woken_seq, Pointer __mutex, int __nwaiters, int __broadcast_seq) {
                super();
                this.__lock = __lock;
                this.__futex = __futex;
                this.__total_seq = __total_seq;
                this.__wakeup_seq = __wakeup_seq;
                this.__woken_seq = __woken_seq;
                this.__mutex = __mutex;
                this.__nwaiters = __nwaiters;
                this.__broadcast_seq = __broadcast_seq;
            }

            public __data_struct(Pointer peer) {
                super(peer);
            }

            public static class ByReference extends __data_struct implements Structure.ByReference {

            };

            public static class ByValue extends __data_struct implements Structure.ByValue {

            };
        };

        public pthread_cond_t() {
            super();
        }

        public pthread_cond_t(NativeLong __align) {
            super();
            this.__align = __align;
            setType(NativeLong.class);
        }

        public pthread_cond_t(__data_struct __data) {
            super();
            this.__data = __data;
            setType(__data_struct.class);
        }

        public pthread_cond_t(byte __size[]) {
            super();
            if ((__size.length != this.__size.length)) {
                throw new IllegalArgumentException("Wrong array size !");
            }
            this.__size = __size;
            setType(byte[].class);
        }

        public pthread_cond_t(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends pthread_cond_t implements Structure.ByReference {

        };

        public static class ByValue extends pthread_cond_t implements Structure.ByValue {

        };
    };

    public static class pthread_condattr_t extends Union {

        public byte[] __size = new byte[4];
        public NativeLong __align;

        public pthread_condattr_t() {
            super();
        }

        public pthread_condattr_t(NativeLong __align) {
            super();
            this.__align = __align;
            setType(NativeLong.class);
        }

        public pthread_condattr_t(byte __size[]) {
            super();
            if ((__size.length != this.__size.length)) {
                throw new IllegalArgumentException("Wrong array size !");
            }
            this.__size = __size;
            setType(byte[].class);
        }

        public pthread_condattr_t(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends pthread_condattr_t implements Structure.ByReference {

        };

        public static class ByValue extends pthread_condattr_t implements Structure.ByValue {

        };
    };

    public static class pthread_rwlock_t extends Union {

        public __data_struct __data;
        public byte[] __size = new byte[32];
        public NativeLong __align;

        public static class __data_struct extends Structure {

            public int __lock;
            public int __nr_readers;
            public int __readers_wakeup;
            public int __writer_wakeup;
            public int __nr_readers_queued;
            public int __nr_writers_queued;
            /**
             * FLAGS must stay at this position in the structure to maintain<br>
             * binary compatibility.
             */
            public byte __flags;
            public byte __shared;
            public byte __pad1;
            public byte __pad2;
            public int __writer;

            public __data_struct() {
                super();
            }

            protected List<?> getFieldOrder() {
                return Arrays.asList("__lock", "__nr_readers", "__readers_wakeup", "__writer_wakeup", "__nr_readers_queued", "__nr_writers_queued", "__flags", "__shared", "__pad1", "__pad2", "__writer");
            }

            public __data_struct(Pointer peer) {
                super(peer);
            }

            public static class ByReference extends __data_struct implements Structure.ByReference {

            };

            public static class ByValue extends __data_struct implements Structure.ByValue {

            };
        };

        public pthread_rwlock_t() {
            super();
        }

        public pthread_rwlock_t(NativeLong __align) {
            super();
            this.__align = __align;
            setType(NativeLong.class);
        }

        public pthread_rwlock_t(__data_struct __data) {
            super();
            this.__data = __data;
            setType(__data_struct.class);
        }

        public pthread_rwlock_t(byte __size[]) {
            super();
            if ((__size.length != this.__size.length)) {
                throw new IllegalArgumentException("Wrong array size !");
            }
            this.__size = __size;
            setType(byte[].class);
        }

        public pthread_rwlock_t(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends pthread_rwlock_t implements Structure.ByReference {

        };

        public static class ByValue extends pthread_rwlock_t implements Structure.ByValue {

        };
    };

    public static class pthread_rwlockattr_t extends Union {

        public byte[] __size = new byte[8];
        public NativeLong __align;

        public pthread_rwlockattr_t() {
            super();
        }

        public pthread_rwlockattr_t(NativeLong __align) {
            super();
            this.__align = __align;
            setType(NativeLong.class);
        }

        public pthread_rwlockattr_t(byte __size[]) {
            super();
            if ((__size.length != this.__size.length)) {
                throw new IllegalArgumentException("Wrong array size !");
            }
            this.__size = __size;
            setType(byte[].class);
        }

        public pthread_rwlockattr_t(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends pthread_rwlockattr_t implements Structure.ByReference {

        };

        public static class ByValue extends pthread_rwlockattr_t implements Structure.ByValue {

        };
    };

    public static class pthread_barrier_t extends Union {

        public byte[] __size = new byte[20];
        public NativeLong __align;

        public pthread_barrier_t() {
            super();
        }

        public pthread_barrier_t(NativeLong __align) {
            super();
            this.__align = __align;
            setType(NativeLong.class);
        }

        public pthread_barrier_t(byte __size[]) {
            super();
            if ((__size.length != this.__size.length)) {
                throw new IllegalArgumentException("Wrong array size !");
            }
            this.__size = __size;
            setType(byte[].class);
        }

        public pthread_barrier_t(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends pthread_barrier_t implements Structure.ByReference {

        };

        public static class ByValue extends pthread_barrier_t implements Structure.ByValue {

        };
    };

    public static class pthread_barrierattr_t extends Union {

        public byte[] __size = new byte[4];
        public int __align;

        public pthread_barrierattr_t() {
            super();
        }

        public pthread_barrierattr_t(int __align) {
            super();
            this.__align = __align;
            setType(Integer.TYPE);
        }

        public pthread_barrierattr_t(byte __size[]) {
            super();
            if ((__size.length != this.__size.length)) {
                throw new IllegalArgumentException("Wrong array size !");
            }
            this.__size = __size;
            setType(byte[].class);
        }

        public pthread_barrierattr_t(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends pthread_barrierattr_t implements Structure.ByReference {

        };

        public static class ByValue extends pthread_barrierattr_t implements Structure.ByValue {

        };
    };

    public static class iovec extends Structure {

        /**
         * Pointer to data.
         */
        public Pointer iov_base;
        /**
         * Length of data.
         */
        public NativeSize iov_len;

        public iovec() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList("iov_base", "iov_len");
        }

        public iovec(Pointer iov_base, NativeSize iov_len) {
            super();
            this.iov_base = iov_base;
            this.iov_len = iov_len;
        }

        public iovec(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends iovec implements Structure.ByReference {

        };

        public static class ByValue extends iovec implements Structure.ByValue {

        };
    };

    public static class sockaddr extends Structure {

        /**
         * Common data: address family and length.
         */
        public short sa_family;
        /**
         * Address data.
         */
        public byte[] sa_data = new byte[14];

        public sockaddr() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList("sa_family", "sa_data");
        }

        public sockaddr(short sa_family, byte sa_data[]) {
            super();
            this.sa_family = sa_family;
            if ((sa_data.length != this.sa_data.length)) {
                throw new IllegalArgumentException("Wrong array size !");
            }
            this.sa_data = sa_data;
        }

        public sockaddr(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends sockaddr implements Structure.ByReference {

        };

        public static class ByValue extends sockaddr implements Structure.ByValue {

        };
    };

    public static abstract class sockaddr_storage extends Structure {

        /**
         * Address family, etc.
         */
        public short ss_family;
        /**
         * Force desired alignment.
         */
        public int __ss_align;

        /**
         * Conversion Error : sizeof(__uint32_t)
         */
        public sockaddr_storage() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList("ss_family", "__ss_align");
        }

        public sockaddr_storage(short ss_family, int __ss_align) {
            super();
            this.ss_family = ss_family;
            this.__ss_align = __ss_align;
        }

        public sockaddr_storage(Pointer peer) {
            super(peer);
        }

        public static abstract class ByReference extends sockaddr_storage implements Structure.ByReference {

        };

        public static abstract class ByValue extends sockaddr_storage implements Structure.ByValue {

        };
    };

    public static class msghdr extends Structure {

        /**
         * Address to send to/receive from.
         */
        public Pointer msg_name;
        /**
         * Length of address data.
         */
        public int msg_namelen;
        /**
         * Vector of data to send/receive into.
         */
        public CLibrary.iovec.ByReference msg_iov;
        /**
         * Number of elements in the vector.
         */
        public NativeSize msg_iovlen;
        /**
         * Ancillary data (eg BSD filedesc passing).
         */
        public Pointer msg_control;
        /**
         * Ancillary data buffer length.<br>
         * !! The type should be socklen_t but the<br>
         * definition of the kernel is incompatible<br>
         * with this.
         */
        public NativeSize msg_controllen;
        /**
         * Flags on received message.
         */
        public int msg_flags;

        public msghdr() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList("msg_name", "msg_namelen", "msg_iov", "msg_iovlen", "msg_control", "msg_controllen", "msg_flags");
        }

        public msghdr(Pointer msg_name, int msg_namelen, CLibrary.iovec.ByReference msg_iov, NativeSize msg_iovlen, Pointer msg_control, NativeSize msg_controllen, int msg_flags) {
            super();
            this.msg_name = msg_name;
            this.msg_namelen = msg_namelen;
            this.msg_iov = msg_iov;
            this.msg_iovlen = msg_iovlen;
            this.msg_control = msg_control;
            this.msg_controllen = msg_controllen;
            this.msg_flags = msg_flags;
        }

        public msghdr(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends msghdr implements Structure.ByReference {

        };

        public static class ByValue extends msghdr implements Structure.ByValue {

        };
    };

    public static class cmsghdr extends Structure {

        /**
         * Length of data in cmsg_data plus length<br>
         * of cmsghdr structure.<br>
         * !! The type should be socklen_t but the<br>
         * definition of the kernel is incompatible<br>
         * with this.
         */
        public NativeSize cmsg_len;
        /**
         * Originating protocol.
         */
        public int cmsg_level;
        /**
         * Protocol specific type.
         */
        public int cmsg_type;

        public cmsghdr() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList("cmsg_len", "cmsg_level", "cmsg_type");
        }

        public cmsghdr(NativeSize cmsg_len, int cmsg_level, int cmsg_type) {
            super();
            this.cmsg_len = cmsg_len;
            this.cmsg_level = cmsg_level;
            this.cmsg_type = cmsg_type;
        }

        public cmsghdr(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends cmsghdr implements Structure.ByReference {

        };

        public static class ByValue extends cmsghdr implements Structure.ByValue {

        };
    };

    public static class ucred extends Structure {

        /**
         * PID of sending process.
         */
        public int pid;
        /**
         * UID of sending process.
         */
        public int uid;
        /**
         * GID of sending process.
         */
        public int gid;

        public ucred() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList("pid", "uid", "gid");
        }

        public ucred(int pid, int uid, int gid) {
            super();
            this.pid = pid;
            this.uid = uid;
            this.gid = gid;
        }

        public ucred(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends ucred implements Structure.ByReference {

        };

        public static class ByValue extends ucred implements Structure.ByValue {

        };
    };

    public static class linger extends Structure {

        /**
         * Nonzero to linger on close.
         */
        public int l_onoff;
        /**
         * Time to linger.
         */
        public int l_linger;

        public linger() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList("l_onoff", "l_linger");
        }

        public linger(int l_onoff, int l_linger) {
            super();
            this.l_onoff = l_onoff;
            this.l_linger = l_linger;
        }

        public linger(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends linger implements Structure.ByReference {

        };

        public static class ByValue extends linger implements Structure.ByValue {

        };
    };

    public static class osockaddr extends Structure {

        public short sa_family;
        public byte[] sa_data = new byte[14];

        public osockaddr() {
            super();
        }

        protected List<?> getFieldOrder() {
            return Arrays.asList("sa_family", "sa_data");
        }

        public osockaddr(short sa_family, byte sa_data[]) {
            super();
            this.sa_family = sa_family;
            if ((sa_data.length != this.sa_data.length)) {
                throw new IllegalArgumentException("Wrong array size !");
            }
            this.sa_data = sa_data;
        }

        public osockaddr(Pointer peer) {
            super(peer);
        }

        public static class ByReference extends osockaddr implements Structure.ByReference {

        };

        public static class ByValue extends osockaddr implements Structure.ByValue {

        };
    };

    int select(int __nfds, CLibrary.fd_set __readfds, CLibrary.fd_set __writefds, CLibrary.fd_set __exceptfds, CLibrary.timeval __timeout);

    int pselect(int __nfds, CLibrary.fd_set __readfds, CLibrary.fd_set __writefds, CLibrary.fd_set __exceptfds, CLibrary.timespec __timeout, CLibrary.__sigset_t __sigmask);

    int readv(int __fd, CLibrary.iovec __iovec, int __count);

    int writev(int __fd, CLibrary.iovec __iovec, int __count);

    CLibrary.cmsghdr __cmsg_nxthdr(CLibrary.msghdr __mhdr, CLibrary.cmsghdr __cmsg);

    int socket(int __domain, int __type, int __protocol);

    @Deprecated
    int socketpair(int __domain, int __type, int __protocol, IntByReference __fds);

    int socketpair(int __domain, int __type, int __protocol, IntBuffer __fds);

    int bind(int __fd, CLibrary.sockaddr __addr, int __len);

    @Deprecated
    int getsockname(int __fd, CLibrary.sockaddr __addr, IntByReference __len);

    int getsockname(int __fd, CLibrary.sockaddr __addr, IntBuffer __len);

    int connect(int __fd, CLibrary.sockaddr __addr, int __len);

    @Deprecated
    int getpeername(int __fd, CLibrary.sockaddr __addr, IntByReference __len);

    int getpeername(int __fd, CLibrary.sockaddr __addr, IntBuffer __len);

    int send(int __fd, Pointer __buf, NativeSize __n, int __flags);

    int recv(int __fd, Pointer __buf, NativeSize __n, int __flags);

    int sendto(int __fd, Pointer __buf, NativeSize __n, int __flags, CLibrary.sockaddr __addr, int __addr_len);

    @Deprecated
    int recvfrom(int __fd, Pointer __buf, NativeSize __n, int __flags, CLibrary.sockaddr __addr, IntByReference __addr_len);

    int recvfrom(int __fd, Pointer __buf, NativeSize __n, int __flags, CLibrary.sockaddr __addr, IntBuffer __addr_len);

    int sendmsg(int __fd, CLibrary.msghdr __message, int __flags);

    int recvmsg(int __fd, CLibrary.msghdr __message, int __flags);

    @Deprecated
    int getsockopt(int __fd, int __level, int __optname, Pointer __optval, IntByReference __optlen);

    int getsockopt(int __fd, int __level, int __optname, Pointer __optval, IntBuffer __optlen);

    int setsockopt(int __fd, int __level, int __optname, Pointer __optval, int __optlen);

    int listen(int __fd, int __n);

    @Deprecated
    int accept(int __fd, CLibrary.sockaddr __addr, IntByReference __addr_len);

    int accept(int __fd, CLibrary.sockaddr __addr, IntBuffer __addr_len);

    int shutdown(int __fd, int __how);

    int sockatmark(int __fd);

    int isfdtype(int __fd, int __fdtype);

    /**
     * Pointer to unknown (opaque) type
     */
    public static class timespec extends PointerType {

        public timespec(Pointer address) {
            super(address);
        }

        public timespec() {
            super();
        }
    };
}
