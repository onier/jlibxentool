package org.xen.jna.xenstat;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import org.xen.jna.xenstat.OrgXenJnaXenstatLibrary.xc_interface;
import org.xen.jna.xenstat.OrgXenJnaXenstatLibrary.xs_handle;
/**
 * <i>native declaration : line 32</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public abstract class xenstat_handle extends Structure {
	/** C type : xc_interface* */
	public xc_interface xc_handle;
	/**
	 * xenstore handle<br>
	 * C type : xs_handle*
	 */
	public xs_handle xshandle;
	public int page_size;
	/** C type : void* */
	public Pointer priv;
	/** Conversion Error : sizeof(xen_extraversion_t) */
	public xenstat_handle() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("xc_handle", "xshandle", "page_size", "priv");
	}
	/**
	 * @param xc_handle C type : xc_interface*<br>
	 * @param xshandle xenstore handle<br>
	 * C type : xs_handle*<br>
	 * @param priv C type : void*
	 */
	public xenstat_handle(xc_interface xc_handle, xs_handle xshandle, int page_size, Pointer priv) {
		super();
		this.xc_handle = xc_handle;
		this.xshandle = xshandle;
		this.page_size = page_size;
		this.priv = priv;
	}
	public xenstat_handle(Pointer peer) {
		super(peer);
	}
	public static abstract class ByReference extends xenstat_handle implements Structure.ByReference {
		
	};
	public static abstract class ByValue extends xenstat_handle implements Structure.ByValue {
		
	};
}
